#!/bin/bash
#Defaults
pwphome=~/.pwp
file=$pwphome/pwp.asc
efile=$file.gpg
cfg=$pwphome/pwp.cfg

#Functions
function getpwd {
	head -c500 /dev/urandom | LC_CTYPE=C tr -dc "A-Za-z0-9" | cut -c 1-8
}

function do_config {
	echo "Writing config file"
	read -p "Enter your gpg username: " gpg_user
	read -p "System Type (1=linux, 2=mac): " sys_type
}

function print_usage {
	echo
	echo
	echo "Usage: pwp [command]"
	echo
	echo "Command ="
	echo
	echo "get:	get a password and put in paste buffer"
	echo "set:	define a new password (if pw is left blank will be randomly generated)"
	echo "list:	list all site / usernames in file"
	echo "config: 	set configuration defaults (note: this must be completed first for pwp to function)"
	echo "edit:	manually edit pwp file (via vi)"
	echo
}

#Check to see if action is set
mode=$1
site=$2
user=$3
pass=$4
if [ -n $mode ] 
	then case $mode in
		"get")
			echo "Get mode"
			if [ -z $site ]
				then echo "You must specify a site (ie. pwp get google)"
				exit 3
			fi
			mode=1
			;;
		"set")
			echo "Set mode"
			if [ -z $site ]
				then echo "You must specify a site (ie. pwp set google)"
				exit 3
			fi
			mode=2
			;;
		"list")
			echo "Listing sites"
			mode=3
			;;
		"edit")
			echo "Editing file"
			mode=4
			;;
		"config")
			echo "Configuring pwp"
			mode=5
			;;
		*)
			print_usage	
			exit 2
			;;
	esac
fi
if [ -z $mode ]
	then echo "You need to specify an action (get / set)"
	exit 2
fi
#Check to see gpg is installed
test=$(gpg --version)
if [ $? -ne 0 ]
then
	echo "You don't have gpg installed"
	exit 1
fi


#Read config file
source ~/.pwp/pwp.cfg

#Get mode. 
if [ $mode -eq 1 ] 
	then
	read -p "Enter username (or blank to skip): " user
	if [ -n "$user" ]
		then
		echo "User: $user"
		lines=$(gpg -d $efile | grep $site | grep $user)
	else
		lines=$(gpg -d $efile | grep $site)
	fi
	cnt=$(echo "$lines" | wc -l)
	if [ $cnt -gt 1 ]
		then 
		echo "More than one entry found for this site / user combination. Please edit file manually to fix"
		exit 10
	fi
	usrname=$(echo "$lines" | awk '{print $2}')
	pass=$(echo "$lines" | awk '{print $3}')
	echo 
	echo "Username for this site is: $usrname"
	oldclip=$(pbpaste)
	printf "%s" $pass | pbcopy
	echo "Password is now in clipboard buffer for next 30 secs"
	sleep 30
	echo "Buffer reset"
	echo $oldclip | pbcopy
fi

#Set mode. 
if [ $mode -eq 2 ]
	then
	gpg -d $efile > $file
	echo
	echo
	read -p "Enter username for this site: " user
	read -s -p "Enter password to set for this site (or leave blank to generate random password): " pass
	if [ -n "$pass" ]
		then 
		echo $site $user $pass >> $file
	else
		echo "Generating random password"
		pass=$(getpwd)
		echo $site $user $pass >> $file
	fi
	gpg -e --yes -r $gpg_user $file
	rm $file
fi
#List mode.
if [ $mode -eq 3 ]
	then
	gpg -d $efile | awk '{print $1, $2}' | grep -v ^*
fi
#Edit mode.
if [ $mode -eq 4 ]
	then
	gpg -d $efile > $file
	vi $file
	gpg -e --yes -r $gpg_user $file
	rm $file
fi
#Config mode.
if [ $mode -eq 5 ]
	then
	#Add config file
	do_config
	echo "gpg_user=$gpg_user" > $cfg
	echo "sys_type=$sys_type" >> $cfg
	echo "Checking to see if $efile exist..."
	if [ -f $efile ]
	then
		echo "pwp file already exist."
	else
		echo "$efile doesn't exist, creating"
		mkdir ~/.pwp
		touch $file
		#Put a salt in file to reduce empty file analysis 
		echo "*$RANDOM $RANDOM $RANDOM $RANDOM" > $file
		gpg -e --yes -r $gpg_user $file
		rm $file
	fi
fi
